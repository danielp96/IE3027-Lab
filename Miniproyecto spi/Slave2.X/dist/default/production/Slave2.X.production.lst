

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Feb 21 21:01:30 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  0105                     	;# 
   114  0107                     	;# 
   115  0108                     	;# 
   116  0109                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0185                     	;# 
   123  0187                     	;# 
   124  0188                     	;# 
   125  0189                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  0081                     	;# 
   164  0085                     	;# 
   165  0086                     	;# 
   166  0087                     	;# 
   167  0088                     	;# 
   168  0089                     	;# 
   169  008C                     	;# 
   170  008D                     	;# 
   171  008E                     	;# 
   172  008F                     	;# 
   173  0090                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0095                     	;# 
   181  0096                     	;# 
   182  0097                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009A                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  0105                     	;# 
   192  0107                     	;# 
   193  0108                     	;# 
   194  0109                     	;# 
   195  010C                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  0185                     	;# 
   201  0187                     	;# 
   202  0188                     	;# 
   203  0189                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000D                     	;# 
   220  000E                     	;# 
   221  000E                     	;# 
   222  000F                     	;# 
   223  0010                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0013                     	;# 
   227  0014                     	;# 
   228  0015                     	;# 
   229  0015                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001B                     	;# 
   237  001C                     	;# 
   238  001D                     	;# 
   239  001E                     	;# 
   240  001F                     	;# 
   241  0081                     	;# 
   242  0085                     	;# 
   243  0086                     	;# 
   244  0087                     	;# 
   245  0088                     	;# 
   246  0089                     	;# 
   247  008C                     	;# 
   248  008D                     	;# 
   249  008E                     	;# 
   250  008F                     	;# 
   251  0090                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0093                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0097                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009A                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  0105                     	;# 
   270  0107                     	;# 
   271  0108                     	;# 
   272  0109                     	;# 
   273  010C                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  0185                     	;# 
   279  0187                     	;# 
   280  0188                     	;# 
   281  0189                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284  0014                     _SSPCON	set	20
   285  0009                     _PORTE	set	9
   286  0007                     _PORTC	set	7
   287  0005                     _PORTA	set	5
   288  0013                     _SSPBUF	set	19
   289  000C                     _PIR1bits	set	12
   290  0001                     _TMR0	set	1
   291  0006                     _PORTB	set	6
   292  000B                     _INTCONbits	set	11
   293  0008                     _PORTD	set	8
   294  0094                     _SSPSTAT	set	148
   295  0081                     _OPTION_REGbits	set	129
   296  008F                     _OSCCON	set	143
   297  0096                     _IOCB	set	150
   298  0089                     _TRISE	set	137
   299  0088                     _TRISD	set	136
   300  0087                     _TRISC	set	135
   301  0086                     _TRISB	set	134
   302  0085                     _TRISA	set	133
   303  043B                     _TRISC3	set	1083
   304  043D                     _TRISC5	set	1085
   305  0189                     _ANSELH	set	393
   306  0188                     _ANSEL	set	392
   307                           
   308                           	psect	cinit
   309  000F                     start_initialization:	
   310                           ; #config settings
   311                           
   312  000F                     __initialization:
   313                           
   314                           ; Clear objects allocated to COMMON
   315  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   316  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   317  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   318  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   319  0013                     end_of_initialization:	
   320                           ;End of C runtime variable initialization code
   321                           
   322  0013                     __end_of__initialization:
   323  0013  0183               	clrf	3
   324  0014  120A  118A  28A5   	ljmp	_main	;jump to C main() function
   325                           
   326                           	psect	bssCOMMON
   327  0077                     __pbssCOMMON:
   328  0077                     _trash:
   329  0077                     	ds	1
   330  0078                     _push_timer:
   331  0078                     	ds	1
   332  0079                     _portb_flags:
   333  0079                     	ds	1
   334  007A                     _push_counter:
   335  007A                     	ds	1
   336                           
   337                           	psect	cstackCOMMON
   338  0070                     __pcstackCOMMON:
   339  0070                     ?_setup:
   340  0070                     ?_push_logic:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_main:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_isr:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ??_isr:	
   350                           ; 1 bytes @ 0x0
   351                           
   352                           
   353                           ; 1 bytes @ 0x0
   354  0070                     	ds	3
   355  0073                     ??_push_logic:
   356  0073                     ?_spi_init:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     spi_init@sDataSample:	
   360                           ; 1 bytes @ 0x3
   361                           
   362                           
   363                           ; 1 bytes @ 0x3
   364  0073                     	ds	1
   365  0074                     spi_init@sClockIdle:
   366                           
   367                           ; 1 bytes @ 0x4
   368  0074                     	ds	1
   369  0075                     spi_init@sTransmitEdge:
   370                           
   371                           ; 1 bytes @ 0x5
   372  0075                     	ds	1
   373  0076                     ??_spi_init:
   374  0076                     spi_init@sType:	
   375                           ; 1 bytes @ 0x6
   376                           
   377                           
   378                           ; 1 bytes @ 0x6
   379  0076                     	ds	1
   380  0077                     ??_setup:
   381  0077                     ??_main:	
   382                           ; 1 bytes @ 0x7
   383                           
   384                           
   385                           	psect	maintext
   386  00A5                     __pmaintext:	
   387                           ; 1 bytes @ 0x7
   388 ;;
   389 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   390 ;;
   391 ;; *************** function _main *****************
   392 ;; Defined at:
   393 ;;		line 72 in file "main.c"
   394 ;; Parameters:    Size  Location     Type
   395 ;;		None
   396 ;; Auto vars:     Size  Location     Type
   397 ;;		None
   398 ;; Return value:  Size  Location     Type
   399 ;;                  1    wreg      void 
   400 ;; Registers used:
   401 ;;		wreg, status,2, status,0, pclath, cstack
   402 ;; Tracked objects:
   403 ;;		On entry : B00/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   407 ;;      Params:         0       0       0       0       0
   408 ;;      Locals:         0       0       0       0       0
   409 ;;      Temps:          0       0       0       0       0
   410 ;;      Totals:         0       0       0       0       0
   411 ;;Total ram usage:        0 bytes
   412 ;; Hardware stack levels required when called:    3
   413 ;; This function calls:
   414 ;;		_push_logic
   415 ;;		_setup
   416 ;; This function is called by:
   417 ;;		Startup code after reset
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           
   422                           ;psect for function _main
   423  00A5                     _main:
   424  00A5                     l849:	
   425                           ;incstack = 0
   426                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   427                           
   428                           
   429                           ;main.c: 74:     setup();
   430  00A5  120A  118A  2017  120A  118A  	fcall	_setup
   431  00AA                     l57:	
   432                           ;main.c: 75:     while(1)
   433                           
   434                           
   435                           ;main.c: 76:     {;main.c: 77:         push_logic();
   436  00AA  120A  118A  2075  120A  118A  	fcall	_push_logic
   437  00AF                     l851:
   438                           
   439                           ;main.c: 79:         PORTD = push_counter;
   440  00AF  087A               	movf	_push_counter,w
   441  00B0  1283               	bcf	3,5	;RP0=0, select bank0
   442  00B1  1303               	bcf	3,6	;RP1=0, select bank0
   443  00B2  0088               	movwf	8	;volatile
   444  00B3  28AA               	goto	l57
   445  00B4  120A  118A  280C   	ljmp	start
   446  00B7                     __end_of_main:
   447                           
   448                           	psect	text1
   449  0017                     __ptext1:	
   450 ;; *************** function _setup *****************
   451 ;; Defined at:
   452 ;;		line 132 in file "main.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;		None
   455 ;; Auto vars:     Size  Location     Type
   456 ;;		None
   457 ;; Return value:  Size  Location     Type
   458 ;;                  1    wreg      void 
   459 ;; Registers used:
   460 ;;		wreg, status,2, status,0, pclath, cstack
   461 ;; Tracked objects:
   462 ;;		On entry : 0/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   466 ;;      Params:         0       0       0       0       0
   467 ;;      Locals:         0       0       0       0       0
   468 ;;      Temps:          0       0       0       0       0
   469 ;;      Totals:         0       0       0       0       0
   470 ;;Total ram usage:        0 bytes
   471 ;; Hardware stack levels used:    1
   472 ;; Hardware stack levels required when called:    2
   473 ;; This function calls:
   474 ;;		_spi_init
   475 ;; This function is called by:
   476 ;;		_main
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480                           
   481                           ;psect for function _setup
   482  0017                     _setup:
   483  0017                     l805:	
   484                           ;incstack = 0
   485                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   486                           
   487                           
   488                           ;main.c: 134:     ANSEL = 0x00;
   489  0017  1683               	bsf	3,5	;RP0=1, select bank3
   490  0018  1703               	bsf	3,6	;RP1=1, select bank3
   491  0019  0188               	clrf	8	;volatile
   492                           
   493                           ;main.c: 135:     ANSELH = 0x00;
   494  001A  0189               	clrf	9	;volatile
   495  001B                     l807:
   496                           
   497                           ;main.c: 137:     TRISA = 0x20;
   498  001B  3020               	movlw	32
   499  001C  1683               	bsf	3,5	;RP0=1, select bank1
   500  001D  1303               	bcf	3,6	;RP1=0, select bank1
   501  001E  0085               	movwf	5	;volatile
   502  001F                     l809:
   503                           
   504                           ;main.c: 138:     TRISB = 0x03;
   505  001F  3003               	movlw	3
   506  0020  0086               	movwf	6	;volatile
   507  0021                     l811:
   508                           
   509                           ;main.c: 139:     TRISC = 0x18;
   510  0021  3018               	movlw	24
   511  0022  0087               	movwf	7	;volatile
   512  0023                     l813:
   513                           
   514                           ;main.c: 140:     TRISD = 0x00;
   515  0023  0188               	clrf	8	;volatile
   516  0024                     l815:
   517                           
   518                           ;main.c: 141:     TRISE = 0x00;
   519  0024  0189               	clrf	9	;volatile
   520  0025                     l817:
   521                           
   522                           ;main.c: 143:     PORTA = 0;
   523  0025  1283               	bcf	3,5	;RP0=0, select bank0
   524  0026  1303               	bcf	3,6	;RP1=0, select bank0
   525  0027  0185               	clrf	5	;volatile
   526  0028                     l819:
   527                           
   528                           ;main.c: 144:     PORTB = 0;
   529  0028  0186               	clrf	6	;volatile
   530  0029                     l821:
   531                           
   532                           ;main.c: 145:     PORTC = 0;
   533  0029  0187               	clrf	7	;volatile
   534  002A                     l823:
   535                           
   536                           ;main.c: 146:     PORTD = 0;
   537  002A  0188               	clrf	8	;volatile
   538  002B                     l825:
   539                           
   540                           ;main.c: 147:     PORTE = 0;
   541  002B  0189               	clrf	9	;volatile
   542                           
   543                           ;main.c: 150:     IOCB = 0x03;
   544  002C  3003               	movlw	3
   545  002D  1683               	bsf	3,5	;RP0=1, select bank1
   546  002E  1303               	bcf	3,6	;RP1=0, select bank1
   547  002F  0096               	movwf	22	;volatile
   548  0030                     l827:
   549                           
   550                           ;main.c: 151:     INTCONbits.RBIE = 1;
   551  0030  158B               	bsf	11,3	;volatile
   552  0031                     l829:
   553                           
   554                           ;main.c: 152:     INTCONbits.T0IE = 1;
   555  0031  168B               	bsf	11,5	;volatile
   556  0032                     l831:
   557                           
   558                           ;main.c: 153:     INTCONbits.GIE = 1;
   559  0032  178B               	bsf	11,7	;volatile
   560                           
   561                           ;main.c: 155:     OSCCON = 0b01100001;
   562  0033  3061               	movlw	97
   563  0034  008F               	movwf	15	;volatile
   564  0035                     l833:
   565                           
   566                           ;main.c: 158:     OPTION_REGbits.T0CS = 0;
   567  0035  1281               	bcf	1,5	;volatile
   568  0036                     l835:
   569                           
   570                           ;main.c: 159:     OPTION_REGbits.PSA = 0;
   571  0036  1181               	bcf	1,3	;volatile
   572  0037                     l837:
   573                           
   574                           ;main.c: 160:     OPTION_REGbits.PS2 = 0;
   575  0037  1101               	bcf	1,2	;volatile
   576  0038                     l839:
   577                           
   578                           ;main.c: 161:     OPTION_REGbits.PS1 = 0;
   579  0038  1081               	bcf	1,1	;volatile
   580  0039                     l841:
   581                           
   582                           ;main.c: 162:     OPTION_REGbits.PS0 = 1;
   583  0039  1401               	bsf	1,0	;volatile
   584                           
   585                           ;main.c: 164:     TMR0 = 6;;
   586  003A  3006               	movlw	6
   587  003B  1283               	bcf	3,5	;RP0=0, select bank0
   588  003C  1303               	bcf	3,6	;RP1=0, select bank0
   589  003D  0081               	movwf	1	;volatile
   590  003E                     l843:
   591                           
   592                           ;main.c: 166:     INTCONbits.T0IF = 0;
   593  003E  110B               	bcf	11,2	;volatile
   594  003F                     l845:
   595                           
   596                           ;main.c: 168:     spi_init(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, 
      +                          SPI_IDLE_2_ACTIVE);
   597  003F  01F3               	clrf	spi_init@sDataSample
   598  0040  01F4               	clrf	spi_init@sClockIdle
   599  0041  01F5               	clrf	spi_init@sTransmitEdge
   600  0042  3024               	movlw	36
   601  0043  120A  118A  208F  120A  118A  	fcall	_spi_init
   602  0048                     l77:
   603  0048  0008               	return
   604  0049                     __end_of_setup:
   605                           
   606                           	psect	text2
   607  008F                     __ptext2:	
   608 ;; *************** function _spi_init *****************
   609 ;; Defined at:
   610 ;;		line 12 in file "spi.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;  sType           1    wreg     enum E1264
   613 ;;  sDataSample     1    3[COMMON] enum E1272
   614 ;;  sClockIdle      1    4[COMMON] enum E1276
   615 ;;  sTransmitEdg    1    5[COMMON] enum E1280
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  sType           1    6[COMMON] enum E1264
   618 ;; Return value:  Size  Location     Type
   619 ;;                  1    wreg      void 
   620 ;; Registers used:
   621 ;;		wreg, status,2, status,0
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   627 ;;      Params:         3       0       0       0       0
   628 ;;      Locals:         1       0       0       0       0
   629 ;;      Temps:          0       0       0       0       0
   630 ;;      Totals:         4       0       0       0       0
   631 ;;Total ram usage:        4 bytes
   632 ;; Hardware stack levels used:    1
   633 ;; Hardware stack levels required when called:    1
   634 ;; This function calls:
   635 ;;		Nothing
   636 ;; This function is called by:
   637 ;;		_setup
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           
   642                           ;psect for function _spi_init
   643  008F                     _spi_init:
   644                           
   645                           ;incstack = 0
   646                           ; Regs used in _spi_init: [wreg+status,2+status,0]
   647                           ;spi_init@sType stored from wreg
   648  008F  00F6               	movwf	spi_init@sType
   649  0090                     l795:
   650                           
   651                           ;spi.c: 12: void spi_init(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sC
      +                          lockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
   652  0090  1683               	bsf	3,5	;RP0=1, select bank1
   653  0091  1303               	bcf	3,6	;RP1=0, select bank1
   654  0092  1287               	bcf	7,5	;volatile
   655                           
   656                           ;spi.c: 15:     if(sType & 0b00000100)
   657  0093  1D76               	btfss	spi_init@sType,2
   658  0094  2896               	goto	u81
   659  0095  2897               	goto	u80
   660  0096                     u81:
   661  0096  289B               	goto	l801
   662  0097                     u80:
   663  0097                     l797:
   664                           
   665                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
   666  0097  0875               	movf	spi_init@sTransmitEdge,w
   667  0098  0094               	movwf	20	;volatile
   668  0099                     l799:
   669                           
   670                           ;spi.c: 18:         TRISC3 = 1;
   671  0099  1587               	bsf	7,3	;volatile
   672                           
   673                           ;spi.c: 19:     }
   674  009A  289F               	goto	l175
   675  009B                     l801:
   676                           
   677                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
   678  009B  0873               	movf	spi_init@sDataSample,w
   679  009C  0475               	iorwf	spi_init@sTransmitEdge,w
   680  009D  0094               	movwf	20	;volatile
   681  009E                     l803:
   682                           
   683                           ;spi.c: 23:         TRISC3 = 0;
   684  009E  1187               	bcf	7,3	;volatile
   685  009F                     l175:	
   686                           ;spi.c: 24:     }
   687                           
   688                           
   689                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
   690  009F  0876               	movf	spi_init@sType,w
   691  00A0  0474               	iorwf	spi_init@sClockIdle,w
   692  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   693  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   694  00A3  0094               	movwf	20	;volatile
   695  00A4                     l176:
   696  00A4  0008               	return
   697  00A5                     __end_of_spi_init:
   698                           
   699                           	psect	text3
   700  0075                     __ptext3:	
   701 ;; *************** function _push_logic *****************
   702 ;; Defined at:
   703 ;;		line 107 in file "main.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      void 
   710 ;; Registers used:
   711 ;;		wreg, status,2, status,0
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   717 ;;      Params:         0       0       0       0       0
   718 ;;      Locals:         0       0       0       0       0
   719 ;;      Temps:          1       0       0       0       0
   720 ;;      Totals:         1       0       0       0       0
   721 ;;Total ram usage:        1 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           
   732                           ;psect for function _push_logic
   733  0075                     _push_logic:
   734  0075                     l757:	
   735                           ;incstack = 0
   736                           ; Regs used in _push_logic: [wreg+status,2+status,0]
   737                           
   738                           
   739                           ;main.c: 109:     if (200 != push_timer)
   740  0075  30C8               	movlw	200
   741  0076  0678               	xorwf	_push_timer,w
   742  0077  1903               	btfsc	3,2
   743  0078  287A               	goto	u21
   744  0079  287B               	goto	u20
   745  007A                     u21:
   746  007A  287C               	goto	l761
   747  007B                     u20:
   748  007B  288E               	goto	l72
   749  007C                     l761:
   750                           
   751                           ;main.c: 114:     push_timer = 0;
   752  007C  01F8               	clrf	_push_timer
   753  007D                     l763:
   754                           
   755                           ;main.c: 116:     if (0x01 == portb_flags)
   756  007D  0379               	decf	_portb_flags,w
   757  007E  1D03               	btfss	3,2
   758  007F  2881               	goto	u31
   759  0080  2882               	goto	u30
   760  0081                     u31:
   761  0081  2886               	goto	l73
   762  0082                     u30:
   763  0082                     l765:
   764                           
   765                           ;main.c: 117:     {;main.c: 118:         push_counter++;
   766  0082  3001               	movlw	1
   767  0083  00F3               	movwf	??_push_logic
   768  0084  0873               	movf	??_push_logic,w
   769  0085  07FA               	addwf	_push_counter,f
   770  0086                     l73:	
   771                           ;main.c: 119:     }
   772                           
   773                           
   774                           ;main.c: 121:     if (0x02 == portb_flags)
   775  0086  3002               	movlw	2
   776  0087  0679               	xorwf	_portb_flags,w
   777  0088  1D03               	btfss	3,2
   778  0089  288B               	goto	u41
   779  008A  288C               	goto	u40
   780  008B                     u41:
   781  008B  288E               	goto	l72
   782  008C                     u40:
   783  008C                     l767:
   784                           
   785                           ;main.c: 122:     {;main.c: 123:         push_counter--;
   786  008C  3001               	movlw	1
   787  008D  02FA               	subwf	_push_counter,f
   788  008E                     l72:
   789  008E  0008               	return
   790  008F                     __end_of_push_logic:
   791                           
   792                           	psect	text4
   793  0049                     __ptext4:	
   794 ;; *************** function _isr *****************
   795 ;; Defined at:
   796 ;;		line 83 in file "main.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;		None
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   810 ;;      Params:         0       0       0       0       0
   811 ;;      Locals:         0       0       0       0       0
   812 ;;      Temps:          3       0       0       0       0
   813 ;;      Totals:         3       0       0       0       0
   814 ;;Total ram usage:        3 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; This function calls:
   817 ;;		Nothing
   818 ;; This function is called by:
   819 ;;		Interrupt level 1
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           
   824                           ;psect for function _isr
   825  0049                     _isr:
   826  0049                     i1l775:
   827                           
   828                           ;main.c: 85:     if (INTCONbits.RBIF)
   829  0049  1C0B               	btfss	11,0	;volatile
   830  004A  284C               	goto	u5_21
   831  004B  284D               	goto	u5_20
   832  004C                     u5_21:
   833  004C  2854               	goto	i1l781
   834  004D                     u5_20:
   835  004D                     i1l777:
   836                           
   837                           ;main.c: 86:     {;main.c: 87:         INTCONbits.RBIF = 0;
   838  004D  100B               	bcf	11,0	;volatile
   839  004E                     i1l779:
   840                           
   841                           ;main.c: 88:         portb_flags = PORTB;
   842  004E  1283               	bcf	3,5	;RP0=0, select bank0
   843  004F  1303               	bcf	3,6	;RP1=0, select bank0
   844  0050  0806               	movf	6,w	;volatile
   845  0051  00F0               	movwf	??_isr
   846  0052  0870               	movf	??_isr,w
   847  0053  00F9               	movwf	_portb_flags
   848  0054                     i1l781:
   849                           
   850                           ;main.c: 91:     if (INTCONbits.T0IF)
   851  0054  1D0B               	btfss	11,2	;volatile
   852  0055  2857               	goto	u6_21
   853  0056  2858               	goto	u6_20
   854  0057                     u6_21:
   855  0057  2861               	goto	i1l789
   856  0058                     u6_20:
   857  0058                     i1l783:
   858                           
   859                           ;main.c: 92:     {;main.c: 93:         INTCONbits.T0IF = 0;
   860  0058  110B               	bcf	11,2	;volatile
   861  0059                     i1l785:
   862                           
   863                           ;main.c: 94:         TMR0 = 6;;
   864  0059  3006               	movlw	6
   865  005A  1283               	bcf	3,5	;RP0=0, select bank0
   866  005B  1303               	bcf	3,6	;RP1=0, select bank0
   867  005C  0081               	movwf	1	;volatile
   868  005D                     i1l787:
   869                           
   870                           ;main.c: 95:         push_timer++;
   871  005D  3001               	movlw	1
   872  005E  00F0               	movwf	??_isr
   873  005F  0870               	movf	??_isr,w
   874  0060  07F8               	addwf	_push_timer,f
   875  0061                     i1l789:
   876                           
   877                           ;main.c: 98:     if (PIR1bits.SSPIF)
   878  0061  1283               	bcf	3,5	;RP0=0, select bank0
   879  0062  1303               	bcf	3,6	;RP1=0, select bank0
   880  0063  1D8C               	btfss	12,3	;volatile
   881  0064  2866               	goto	u7_21
   882  0065  2867               	goto	u7_20
   883  0066                     u7_21:
   884  0066  286E               	goto	i1l68
   885  0067                     u7_20:
   886  0067                     i1l791:
   887                           
   888                           ;main.c: 99:     {;main.c: 100:         trash = SSPBUF;
   889  0067  0813               	movf	19,w	;volatile
   890  0068  00F0               	movwf	??_isr
   891  0069  0870               	movf	??_isr,w
   892  006A  00F7               	movwf	_trash
   893                           
   894                           ;main.c: 101:         SSPBUF = push_counter;
   895  006B  087A               	movf	_push_counter,w
   896  006C  0093               	movwf	19	;volatile
   897  006D                     i1l793:
   898                           
   899                           ;main.c: 102:         PIR1bits.SSPIF = 0;
   900  006D  118C               	bcf	12,3	;volatile
   901  006E                     i1l68:
   902  006E  0872               	movf	??_isr+2,w
   903  006F  008A               	movwf	10
   904  0070  0E71               	swapf	??_isr+1,w
   905  0071  0083               	movwf	3
   906  0072  0EFE               	swapf	btemp,f
   907  0073  0E7E               	swapf	btemp,w
   908  0074  0009               	retfie
   909  0075                     __end_of_isr:
   910  007E                     btemp	set	126	;btemp
   911  007E                     wtemp0	set	126
   912                           
   913                           	psect	intentry
   914  0004                     __pintentry:	
   915                           ;incstack = 0
   916                           ; Regs used in _isr: [wreg+status,2+status,0]
   917                           
   918  0004                     interrupt_function:
   919  007E                     saved_w	set	btemp
   920  0004  00FE               	movwf	btemp
   921  0005  0E03               	swapf	3,w
   922  0006  00F1               	movwf	??_isr+1
   923  0007  080A               	movf	10,w
   924  0008  00F2               	movwf	??_isr+2
   925  0009  120A  118A  2849   	ljmp	_isr
   926                           
   927                           	psect	config
   928                           
   929                           ;Config register CONFIG1 @ 0x2007
   930                           ;	Oscillator Selection bits
   931                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   932                           ;	Watchdog Timer Enable bit
   933                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   934                           ;	Power-up Timer Enable bit
   935                           ;	PWRTE = OFF, PWRT disabled
   936                           ;	RE3/MCLR pin function select bit
   937                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   938                           ;	Code Protection bit
   939                           ;	CP = OFF, Program memory code protection is disabled
   940                           ;	Data Code Protection bit
   941                           ;	CPD = OFF, Data memory code protection is disabled
   942                           ;	Brown Out Reset Selection bits
   943                           ;	BOREN = OFF, BOR disabled
   944                           ;	Internal External Switchover bit
   945                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   946                           ;	Fail-Safe Clock Monitor Enabled bit
   947                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   948                           ;	Low Voltage Programming Enable bit
   949                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   950                           ;	In-Circuit Debugger Mode bit
   951                           ;	DEBUG = 0x1, unprogrammed default
   952  2007                     	org	8199
   953  2007  20D4               	dw	8404
   954                           
   955                           ;Config register CONFIG2 @ 0x2008
   956                           ;	Brown-out Reset Selection bit
   957                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   958                           ;	Flash Program Memory Self Write Enable bits
   959                           ;	WRT = OFF, Write protection off
   960  2008                     	org	8200
   961  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_spi_init

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     360
                         _push_logic
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                           _spi_init
 ---------------------------------------------------------------------------------
 (2) _spi_init                                             4     1      3     360
                                              3 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _push_logic                                           1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _push_logic
   _setup
     _spi_init

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Feb 21 21:01:30 2021

                     l72 008E                       l73 0086                       l57 00AA  
                     l77 0048                       u20 007B                       u21 007A  
                     u30 0082                       u31 0081                       u40 008C  
                     u41 008B                       u80 0097                       u81 0096  
                    l175 009F                      l176 00A4                      l801 009B  
                    l803 009E                      l811 0021                      l821 0029  
                    l813 0023                      l805 0017                      l831 0032  
                    l823 002A                      l815 0024                      l807 001B  
                    l761 007C                      l841 0039                      l833 0035  
                    l825 002B                      l817 0025                      l809 001F  
                    l763 007D                      l843 003E                      l835 0036  
                    l827 0030                      l819 0028                      l851 00AF  
                    l765 0082                      l757 0075                      l845 003F  
                    l837 0037                      l829 0031                      l767 008C  
                    l839 0038                      l849 00A5                      l795 0090  
                    l797 0097                      l799 0099                      _isr 0049  
           _push_counter 007A                     ?_isr 0070                     _IOCB 0096  
                   i1l68 006E                     _TMR0 0001                     u5_20 004D  
                   u5_21 004C                     u6_20 0058                     u6_21 0057  
                   u7_20 0067                     u7_21 0066                     _main 00A5  
                   btemp 007E                     start 000C                    ??_isr 0070  
                  ?_main 0070                    _ANSEL 0188                    i1l781 0054  
                  i1l791 0067                    i1l783 0058                    i1l775 0049  
                  i1l793 006D                    i1l785 0059                    i1l777 004D  
                  i1l787 005D                    i1l779 004E                    i1l789 0061  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _PORTE 0009                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _TRISE 0089                    _setup 0017            spi_init@sType 0076  
                  _trash 0077                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 00B7  
                 ??_main 0077                   ?_setup 0070                   _ANSELH 0189  
                 _OSCCON 008F                   _TRISC3 043B                   _TRISC5 043D  
                 _SSPBUF 0013                   _SSPCON 0014                   saved_w 007E  
       __end_of_spi_init 00A5  __end_of__initialization 0013           __pcstackCOMMON 0070  
          __end_of_setup 0049           _OPTION_REGbits 0081                  ??_setup 0077  
             __pmaintext 00A5               __pintentry 0004                  _SSPSTAT 0094  
     spi_init@sClockIdle 0074                ?_spi_init 0073                  __ptext1 0017  
                __ptext2 008F                  __ptext3 0075                  __ptext4 0049  
           __size_of_isr 002C     end_of_initialization 0013               ??_spi_init 0076  
             _push_logic 0075               _push_timer 0078      start_initialization 000F  
            __end_of_isr 0075              __pbssCOMMON 0077                ___latbits 0002  
            ?_push_logic 0070        __size_of_spi_init 0016           __size_of_setup 0032  
      interrupt_function 0004                 _PIR1bits 000C      __size_of_push_logic 001A  
    spi_init@sDataSample 0073    spi_init@sTransmitEdge 0075            __size_of_main 0012  
               _spi_init 008F               _INTCONbits 000B             ??_push_logic 0073  
               intlevel1 0000       __end_of_push_logic 008F              _portb_flags 0079  
